* architecture, revised?
There are two kinds of facts: state (linear) and knowledge ("persistent").

There are two kinds of state:
- messages (input & output)
- internal state

There are two kinds of knowledge
- external knowledge
- derived knowledge

State plus external knowledge (plus input messages?) is "ground truth".

# Rules
- State transitions: Can change internal state, consume input messages, and
  produce output messages. Can depend on knowledge but not define it.

- Views: Define derived knowledge. Can depend on input messages, internal state,
  external knowledge, and other derived knowledge (might need a circularity
  check, though). (I don't see any use-case for depending on output messages,
  but I also see no reason to disallow it.)

** 'Persistent' is a misnomer
Persistent facts can change over time. However, within a given time-step, they
do not change; they cannot be consumed or produced, only true or false, and
there is no question of "how many" instances of them there are. In contrast,
linear facts can be consumed and produced and *do* have numeric multiplicity.

** Dependence of view rules on state predicates
The issue of view rules depending on state is interesting & complicated.

My original idea was to treat state predicates just like view predicates when
they occur in the premise of a view rule. This works, but is not quite right!

Suppose have(X) is a linear predicate and can(X) is a view predicate. Consider:

  can(buy_soda) :- have(dollar), have(dollar).

Then can(buy_soda) will be *true* even if we only have one dollar! This is
because "," in a view rule is conjunction ∧, not linear tensor ⊗!

*** Solution: provable(P)
*Really* what we want is a predicate provable(P) that makes turns *resources* P
into *propositions*. Note that "provable" here means "hypothetically provable
from *only the linear facts in the database at the current time*". In
particular, we cannot use our linear state transition rules to "prove" things.
Otherwise everything gets very... confusing.

So then we can distinguish between:

  can(buy_soda) :- provable(have(dollar) ⊗ have(dollar)).
  can(buy_soda) :- provable(have(dollar)), provable(have(dollar)).

Voilà!

*** Problems with implementing this solution
My current plan is to implement view predicates using forward-chaining. However,
because of tensor, implementing provable(P) this way causes combinatorial
explosion!

So for now I'm going to go with my original idea.

* architecture
Two kinds of facts:
ground truth (state) / derived knowledge (views)

# Rules:
- state transitions:
  depend on both ground truth & derived knowledge, change ground truth

- view rules:
  depend on ground truth & derived knoweldge, define derived knowledge

# Other notes:
- inputs: affect ground truth by introducing new facts
  (SENSE PREDICATES)

- outputs: certain linear facts are consumed by the outside world as messages
  (ACTION PREDICATES)

- views: a live view of the system can hopefully be defined as a view that is
  interpreted somehow by the external system.
  (DISPLAY PREDICATES)

# Problems:
- does derived knowledge forward-chain? backward-chain?
  how to avoid circularity, or permit it in a reasonable manner?

- how can we efficiently re-calculate views when ground truth changes?
  (Eve had to tackle this, look at how they did it.)

# Questions:
- is there any logical story for the relation between ground truth & derived
  knowledge? ground truth acts linearly within itself, but derived knowledge
  doesn't change it. what's up with that?

- is there some relation to temporal logic here?

- do we have any guarantee that outside inputs will get processed? Ceptre
  achieves this by having separate "phases" (which seem like syntax sugar, but
  maybe useful syntax sugar!) and then being able to detect if an outside input
  hasn't been processed within the right phase.

- (how) do we distinguish inputs/outputs/displayable-views from ordinary facts?
  in Ceptre, program declares things as {predicates, sense, action}.
  in Quelle: {state, sense, action, view, display}?

* example applications
games:
- chess
- snake
- asteroids
- IFs, roguelikes

web server
build system
code analysis (eg. liveness)
dice roller
D&D stats calculator / game assistant

* implementation
one option for a decent prototype would be to do it in Elm!
if Elm is too slow, could do JS backend / Elm frontend.

* derived-knowledge language

  l : literals
  ⊕ : binary operator
  c : constructor

  e : expression
  e ::= x | l | e ⊕ e
        (e₁, ..., eₙ) | πᵢ e
        c(e₁, ..., eₙ) | case e {| pᵢ → eᵢ}*
        -- can I really have sets of *functions*?
        -- how do I decide function equality?
        -- as long as I don't care about aggregation it might not matter
        -- but I probably do care about aggregation, ugh
        -- what about the monoidal-closed structure of Rel? does that help?
        -- (perhaps that just gives you composition of relations?)
        -- (hm... equality of finite relations is decidable!)
        λx.e | e₁ e₂
        p ← e; e | fail | e₁ || e₂

  sugar:
    where e := true ← e
    (let p = e₁ in e₂) := (case e₁ | p → e₂ | _ → fail)

  p : pattern
  p ::= x | l | c(p₁, ..., pₙ)
        p ∧ p | p ∨ p
        satisfies e # ?
        ap f p      # ?
        p <- (p. e) # ?
        ... add more later - go look in my notebook! ...

  d : declaration
  d ::= x = e

# some examples
choice : [a] -> a
choice [] = fail
choice [x:xs] = x || choice xs

choice x = case x | nil() → fail | cons(x,xs) → x || choice xs

** problems with view language
- no negation
- unrestricted recursion

* datalog notes

TODO: include negation

  c : clause
  l : literal
  p : predicate symbol
  t : term
  k : constant
  v : variable

  c ::= l :- l, ..., l.
  l ::= p(t, ..., t)
  t ::= k | v

  clause sugar:
    l. --> l :- .   # i.e. empty list on rhs

Restrictions:
- Each variable occuring in the head of a clause must occur in its body. Thus
  facts (clauses with no body) must be ground (have no variables). This prevents
  quantifying over anything but finite sets.

- All clauses defining a given predicate symbol have the same arity.
  (This is inessential.)

- Unlike in Prolog, terms may not be compound (i.e. of the form k(t, ..., t) for
  some constant symbol k). This prevents generating new terms in rules, which is
  necessary to guarantee termination.

- Negation must be stratified. This means: Generate a graph of predicates by
  putting an edge between predicate P and Q if any of P's clauses reference Q
  beneath a negation. This graph must be acyclic.

  Recursion is otherwise entirely permissible. (The semantics of datalog are
  "least fixed point", so "foo(X) :- foo(X)." is a no-op.)

- Moreover, each variable occurring in a negative literal of a clause body must
  also occur in a positive literal in the same body. I believe this is necessary
  for termination. Consider (foo :- not bar(Y).). This basically means "foo if
  forall Y, not bar(Y).", but we haven't said over what we are quantifying!

  Basically, all variables we ever use must occur in positive position so that
  they have some "source of definition".

Notes:
- May implicitly test equality of variables by using them twice, as in Prolog.

To consider:
- Aggregation methods.
