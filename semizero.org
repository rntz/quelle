* Thoughts on semilattices-with-zero.

Semilattice is a set with an associative commutative idempotent binary "join"
operation that gives "maximum" of its arguments.

** Why semilattices with zero?

Consider the powerset monad Pow : Set -> Set.

The Kleisli category of Pow is (isomorphic to) the category Rel of sets and
relations. The Eilenboorg-Moore category of Pow is the category of complete
semilattices. A complete semilattice is one where every set has a join,
including in particular the empty set (whose join we call zero) and infinite
sets.

Infinite joins are difficult, as are infinite relations (see: Datalog vs Prolog,
stratified negation), so let's restrict ourselves to the *finite* powerset monad
P : Set -> Set that takes a set A the set of all *finite* subsets of A.

The Kleisli & Eilenberg-Moore categories of P are finitely expansive maps and
semilattices with zero (i.e. semilattices with all *finite* joins),
respectively.

(A finitely expansive map f : A -> B is a function f : A -> FiniteSet B.)

** Notation

If A is a semilattice, [A] is its carrier set.
0 is the identity.
(a ∨ b) is the join of a and b.

** Category of semilattices
Category of semilattices is symmetric closed monoidal, or "*-autonomous".

This means all finite products & coproducts coincide (this is called
"semiadditive"). 0 is the initial & terminal object ("zero object"). Any two
objects have a unique "zero morphism" between them that factors through 0.

The tensor product construction is weeiiiird.

** Semilattices and partial orders

Every semilattice induces a partial order as follows:

    a ≤ b iff (a ∧ b) = b

≤ is reflexive b/c ∧ is idempotent.
≤ is transitive b/c ∧ is associative.

    Assume: (a ∧ b = b) and (b ∧ c = c)
    TS: (a ∧ c = c)
    Proof: a ∧ c = a ∧ (b ∧ c) = (a ∧ b) ∧ c = b ∧ c = c

≤ is antisymmetric b/c ∧ is commutative.

    Assume: (a ∧ b = b) and (b ∧ a = a)
    TS: a = b
    Proof: a = b ∧ a = a ∧ b = b

0 is the least element of this order.

TANGENT: This construction generalizes to constructing a relation from any
binary operator! Such a relation is reflexive if(f?) the operator is idempotent,
transitive if(f?) the operator is associative, and antisymmetric if(f?) it is
commutative. Neat!

** Language over semilattices with zero

types   A ::= A × B | A ⊗ B | A ⊸ A | 0

exprs   e ::= (e,e) | let (x,y) = e in e
              inl e | inr e | case e of inl x -> e; inr x -> e
              ⟨e,e⟩ | π₁ e | π₂ e
              ()
              λ x. e | e e
              e ∨ e | 0

A x B is cartesian product of semilattices.

  [A x B]       =: [A] x [B]
  (a,x) ∨ (b,y) =: (a ∨ b, x ∨ y)
  0             =: (0,0)

  thus (a,x) ≤ (b,y) iff (a ≤ b) and (x ≤ y)
